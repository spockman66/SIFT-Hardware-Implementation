`timescale 1ns / 1ps
`ifndef DLY
   `define DLY #1
`endif
//========================================================================
//this is a synthesisable moduel, use for small memory which is not worth generated by memory complier
//wanghongyu 20121205
//========================================================================

module m7s_regram (
    A_clk,
    A_rst_n,   
    A_d,
    A_addr,
    A_wr_n,

    B_clk,
    B_rst_n,   
    B_q,
    B_addr,
    B_rd_n
);

parameter  DATASIZE = 8;                        // Memory data word width
parameter  ADDRSIZE = 4;                        // Number of memory address bits
localparam DEPTH = 1<<ADDRSIZE;         // DEPTH = 2 ^ ADDRSIZE

input                         A_clk;
input                         A_rst_n;
input [DATASIZE -1:0]         A_d;
input [ADDRSIZE - 1: 0]       A_addr;
input                         A_wr_n;

input                         B_clk;
input                         B_rst_n;
input [ADDRSIZE - 1: 0]       B_addr;
input                         B_rd_n;

output[DATASIZE -1:0]            B_q;
reg   [DATASIZE -1:0]            B_q;

//======
integer iii;
reg    [DATASIZE-1:0] mem [0:DEPTH-1];

always @(posedge A_clk or negedge A_rst_n) begin
    if(A_rst_n == 0) begin
          for(iii =0;iii<DEPTH;iii = iii + 1) begin
             mem[iii] <= `DLY 'h0;
          end
    end
    else if(!A_wr_n) begin
        mem[A_addr] <= `DLY A_d;
    end
end
always @(posedge B_clk or negedge B_rst_n) begin
    if(B_rst_n == 0) begin
        B_q          <= `DLY 'h0;
    end
    else if (!B_rd_n) begin
        B_q          <= `DLY mem[B_addr];
    end
end
endmodule

